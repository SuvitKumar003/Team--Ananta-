services:
  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: log-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - log-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: log-analyzer-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      MONGODB_URI: ${MONGODB_URI}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CEREBRAS_API_KEY: ${CEREBRAS_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - log-analyzer-network

  # Frontend UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: log-analyzer-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - log-analyzer-network
    environment:
      REACT_APP_API_URL: http://localhost:5000/api

  # Sample App (Log Generator)
  sample-app:
    build:
      context: ./sample-app
      dockerfile: Dockerfile
    container_name: log-generator-sample-app
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      LOG_BACKEND_URL: http://backend:5000/api/logs
      BATCH_LOG_URL: http://backend:5000/api/logs/batch
    depends_on:
      - backend
    networks:
      - log-analyzer-network

volumes:
  redis_data:
    driver: local

networks:
  log-analyzer-network:
    driver: bridge


